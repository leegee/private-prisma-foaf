// https://www.prisma.io/docs/concepts/database-connectors/postgresql#type-mapping-between-postgresql-to-prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../erd.svg"
}

model Verb {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(128)
  stem        String?     @db.VarChar(128)
  description String?
  Predicate   Predicate[]

  @@unique([name])
}

model Entity {
  id          Int         @id @default(autoincrement())
  knownas     String      @db.VarChar(128) // eg JFK, Bell
  formalname  String      @db.VarChar(128) // eg John F Kennedy, Bell Aircraft Corporation
  givenname   String?     @db.VarChar(128) // eg John
  middlenames String?     @db.VarChar(128) // eg Fitzgerald
  familyname  String?     @db.VarChar(128) // eg Kennedy
  dob         DateTime?   @db.Date
  dod         DateTime?   @db.Date
  approved    Boolean     @default(false)
  Subject     Predicate[] @relation("Subject")
  Object      Predicate[] @relation("Object")

  @@unique([knownas])
  @@unique([formalname])
  @@unique([knownas, dob, dod])
  @@unique([givenname, middlenames, familyname, dob, dod])
  @@index([knownas])
  @@index([formalname])
  @@index([knownas, formalname])
  @@index([knownas, id])
}

model Citation {
  id                 Int        @id @default(autoincrement())
  url                String
  Predicate          Predicate? @relation(fields: [predicateSubjectId, predicateObjectId, predicateVerbId], references: [subjectId, objectId, verbId])
  predicateSubjectId Int?
  predicateObjectId  Int?
  predicateVerbId    Int?
}

model Predicate {
  subjectId Int
  Subject   Entity @relation("Subject", fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  objectId Int
  Object   Entity @relation("Object", fields: [objectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  verbId Int
  Verb   Verb @relation(fields: [verbId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  start DateTime? @db.Date
  end   DateTime? @db.Date

  citations Citation[]

  @@id([subjectId, objectId, verbId])
  @@index([objectId])
  @@index([subjectId])
  @@index([verbId])
}
